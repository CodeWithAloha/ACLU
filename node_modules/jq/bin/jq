#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander');

var fs  = require('fs'),
    path = require('path'),
    proc = require('child_process'),
    async = require('async'),
    rimraf = require('rimraf');

var winston = require('winston'),
    colors = require('colors');

var jq;

try {
  jq = require('../index');
} catch (err) {
  jq = {
    version: 'None'
  };
}

var dir = process.cwd();

winston.cli();

function info() {
  winston.info('');
  winston.info('     __________  '.rainbow);
  winston.info('    |__\\_____  \\  '.rainbow + '  Server-side jQuery build automation'.green);
  winston.info('    |  |/  / \\  \\ '.rainbow);
  winston.info('    |  /   \\_/.  \\ '.rainbow);
  winston.info('/\\__|  \\_____\\ \\_/'.rainbow);
  winston.info('\\______|      \\__>'.rainbow);
  winston.info('');
  winston.info('Current jQuery version: ' + jq.version.green);
  winston.info('');
}

function cleanDist (callback) {
  rimraf(path.join(__dirname, '..', 'dist'), callback);
}

function cleanRepo (callback) {
  rimraf(path.join(__dirname, '..', 'support', 'jquery'),
    function() {
      proc.exec('git submodule update', function (error, stdout, stdin) {
        if (error !== null) {
          callback(error);
          return;
        }
        callback();
      });
    });

}

function checkoutVersion (version, callback) {
  proc.exec('git checkout ' + version, {
    cwd: path.join(__dirname, '..', 'support', 'jquery')
  }, function (error, stdout, stdin) {
    if (error !== null) {
      callback(error);
      return;
    }
    callback();
  });
}

function makeJquery (callback) {
  proc.exec('make update_submodules && make PREFIX=' + path.join(__dirname, '..') + ' jquery', {
    cwd: path.join(__dirname, '..', 'support', 'jquery')
  }, function (error, stdout, stdin) {
    if (error !== null) {
      callback(error);
      return;
    }
    callback();
  });
}

function stitchJquery (callback) {
  var prefix = fs.readFileSync(path.join(__dirname, '..', 'lib', 'jquery.prefix.js'), 'utf-8'),
      suffix = fs.readFileSync(path.join(__dirname, '..', 'lib', 'jquery.suffix.js'), 'utf-8'),
      jquery = fs.readFileSync(path.join(__dirname, '..', 'dist', 'jquery.js'), 'utf-8');

  fs.writeFileSync(path.join(__dirname, '..', 'lib', 'jq.js'), prefix + '\n' + jquery + '\n' + suffix);
  callback();
}

program
  .version(jq.version);

program
  .command('build [version]')
  .description('Build jQuery at specific '.grey + '[version]'.green)
  .action(function (version) {
    info();
    if (!version) {
      winston.error('Version is required: ' + 'build [version]'.red);
      process.exit();
    }
    winston.info('Building jQuery at version ' + version.green);
    async.series({
      cleanDist: function (cb) {
        winston.info('Cleaning up dist folder');
        cleanDist(cb);
      },
      repo: function (cb) {
        winston.info('Getting clean copy of ' + 'github.com/jquery/jquery'.green.underline);
        cleanRepo(cb);
      },
      checkoutVersion: function (cb) {
        winston.info('Checking out version ' + version.green);
        checkoutVersion(version, cb);
      },
      makeJquery: function (cb) {
        winston.info('Building jQuery dist');
        makeJquery(cb);
      },
      stitchJquery: function (cb) {
        winston.info('Stiching up server-side library');
        stitchJquery(cb);
      }
    }, function (error, results) {
      if (!error) {
        winston.info('');
        winston.info('All done!'.green + ' Please run \'make test\' for testing.'.grey);
      } else {
        console.log(error);
      }
    });
  });

program
  .command('info')
  .description('Just showing you what\'s up.'.grey)
  .action(function () {
    info();
  });


program.parse(process.argv);
